import pytest
from pathlib import Path
from pySnowRadar.snowradar import SnowRadar

# test the main SnowRadar class by itself plus the OIB and AWI subclasses
TEST_DATA_ROOT = Path(__file__).parent.parent / 'pySnowRadar' / 'data'
OIB_TEST_FILE = TEST_DATA_ROOT / 'sr' / 'Data_20160419_04_010.mat'
AWI_TEST_FILE = TEST_DATA_ROOT / 'awi' / 'Data_20170410_01_006.mat'
NSIDC_TEST_FILE = TEST_DATA_ROOT / 'nsidc' / 'IRSNO1B_20160419_04_006_deconv.nc'
TEST_NOT_A_FILE = Path('./fake_sr.mat')

# fixtures are basically objects only instantiated when tests request them specifically
@pytest.fixture
def oib_full():
    '''Full load class for OIB matfile Data_20160419_04_010.mat'''
    return SnowRadar(str(OIB_TEST_FILE), l_case='full')

@pytest.fixture
def oib_meta():
    '''Meta load class for OIB matfile Data_20160419_04_010.mat'''
    return SnowRadar(str(OIB_TEST_FILE), l_case='meta')

@pytest.fixture
def awi_full():
    '''Full load class for AWI matfile Data_20170410_01_006.mat'''
    return SnowRadar(str(AWI_TEST_FILE), l_case='full')

@pytest.fixture
def awi_meta():
    '''Meta load class for AWI matfile Data_20170410_01_006.mat'''
    return SnowRadar(str(AWI_TEST_FILE), l_case='meta')

@pytest.fixture
def nsidc_full():
    '''Full load class for NSIDC matfile IRSNO1B_20160419_04_006_deconv.nc'''
    return SnowRadar(str(NSIDC_TEST_FILE), l_case='full')

@pytest.fixture
def nsidc_meta():
    '''Meta load class for NSIDC matfile IRSNO1B_20160419_04_006_deconv.nc'''
    return SnowRadar(str(NSIDC_TEST_FILE), l_case='meta')

def test_file_missing():
    with pytest.raises(FileNotFoundError):
        fake_file = SnowRadar('this-file-definitely-does-not-exist-on-anyones-computer-probably.jpeg.gif.tif.ogg.mp4', l_case='full')

def test_bad_file():
    with pytest.raises(IOError):
        bad_file = SnowRadar(TEST_NOT_A_FILE, 'meta')

def test_invalid_load_case():
    with pytest.raises(ValueError):
        wrong_l_case = SnowRadar(str(OIB_TEST_FILE), l_case='not_a_real_l_CASE')

def test_awi_str_repr(awi_full, awi_meta):
    expected = f'AWI_MAT Datafile: {Path(AWI_TEST_FILE).name}'
    assert str(awi_full) == expected
    assert str(awi_meta) == expected

def test_oib_str_repr(oib_full, oib_meta):
    expected = f'OIB_MAT Datafile: {Path(OIB_TEST_FILE).name}'
    assert str(oib_full) == expected
    assert str(oib_meta) == expected
    
def test_nsidc_str_repr(nsidc_full, nsidc_meta):
    expected = f'NSIDC_NC Datafile: {Path(NSIDC_TEST_FILE).name}'
    assert str(nsidc_full) == expected
    assert str(nsidc_meta) == expected

def test_awi_as_dict(awi_full, awi_meta):
    '''expected data based on Data_20170410_01_006.mat'''
    expected_full = {
        'fname': AWI_TEST_FILE.name,
        'fpath': str(AWI_TEST_FILE.absolute()),
        'l_case': 'full',
        'tstart': 1491867198.6980438, # utc time
        'tend': 1491867294.850502, # utc time
        'poly': 'POLYGON ((-156.4123497738317 71.33410559555396, -156.4123497738317 71.3672588206452, -156.503229401445 71.3672588206452, -156.503229401445 71.33410559555396, -156.4123497738317 71.33410559555396))',
        'line': 'POLYGON ((-156.4123497738317 71.33410559555396, -156.4123497738317 71.3672588206452, -156.503229401445 71.3672588206452, -156.503229401445 71.33410559555396, -156.4123497738317 71.33410559555396))',
 'line': 'LINESTRING (-156.503229401445 71.33410559555396, -156.5028551139497 71.33420001024284, -156.4994501992442 71.33507121450617, -156.4983179582443 71.33535799851937, -156.4971835218435 71.33563951757586, -156.4960485488587 71.33591909390066, -156.4926386277197 71.33675368307246, -156.490366357573 71.33732137574926, -156.4892625474061 71.3376002105995, -156.4881663698033 71.33788202948755, -156.4870267934291 71.33818112262261, -156.4859492188401 71.33847143657134, -156.4848625073026 71.33876932173673, -156.483784689499 71.33907415017491, -156.4827114561301 71.33938391097996, -156.4816580515168 71.33970010180795, -156.4806175290822 71.34002026596853, -156.4785529076026 71.34067126323862, -156.4775074001318 71.34099309868598, -156.4764523297004 71.3413126205802, -156.4753829071092 71.3416291319849, -156.4742990792749 71.34194096860639, -156.473209068999 71.34225050860968, -156.4699273843945 71.34316840458551, -156.4677194967091 71.34378008019132, -156.4666457021682 71.34408126646501, -156.4655568074973 71.34439305053294, -156.4644546286366 71.34471405200787, -156.4623063595145 71.34535073339525, -156.4612346705911 71.34567025987494, -156.4591188389623 71.34630501340936, -156.4580637062034 71.34662619038286, -156.4569977042272 71.34695328226798, -156.4528611950474 71.34823204819024, -156.4507845482672 71.34887869336997, -156.4497307538724 71.34920853010452, -156.4476568215387 71.34986321248422, -156.4455978909015 71.35052080875229, -156.4414593131216 71.35184648151713, -156.4404018149463 71.35218036707008, -156.43936166517 71.35250487200962, -156.4383121627975 71.35282803048864, -156.4372566415278 71.35314817723791, -156.4351649710382 71.35377930617807, -156.4341286180022 71.35410241925118, -156.4331100164198 71.3544406228811, -156.4321429781732 71.35478748121061, -156.4312227689677 71.35514529869755, -156.4303657450533 71.35551066383643, -156.429536208332 71.35590364385305, -156.4287672722377 71.35630801703684, -156.4280681279714 71.356709515711, -156.4273962026615 71.35712472542727, -156.4267505245791 71.35754243598277, -156.4248684492712 71.35879328280319, -156.4242244856834 71.35921867035663, -156.4223171114144 71.36047470647941, -156.4210310955399 71.36131761322342, -156.419727423489 71.36216176635099, -156.4177551003463 71.36343444962594, -156.4170914671864 71.36386131661163, -156.4157594254482 71.36471430457546, -156.4151014161232 71.36514075704201, -156.41445403608 71.36556844566474, -156.4138270011613 71.36600031140608, -156.4132410801138 71.36643465288353, -156.4127210251959 71.36688103892821, -156.4123497738317 71.3672588206452)'
    }
    expected_meta = {
        'fname': AWI_TEST_FILE.name,
        'fpath': str(AWI_TEST_FILE.absolute()),
        'l_case': 'meta',
        'tstart': 1491867198.6980438, # utc time
        'tend': 1491867294.850502, # utc time
        'poly': 'POLYGON ((-156.4123497738317 71.33410559555396, -156.4123497738317 71.3672588206452, -156.503229401445 71.3672588206452, -156.503229401445 71.33410559555396, -156.4123497738317 71.33410559555396))',
        'line': 'POLYGON ((-156.4123497738317 71.33410559555396, -156.4123497738317 71.3672588206452, -156.503229401445 71.3672588206452, -156.503229401445 71.33410559555396, -156.4123497738317 71.33410559555396))',
 'line': 'LINESTRING (-156.503229401445 71.33410559555396, -156.5028551139497 71.33420001024284, -156.4994501992442 71.33507121450617, -156.4983179582443 71.33535799851937, -156.4971835218435 71.33563951757586, -156.4960485488587 71.33591909390066, -156.4926386277197 71.33675368307246, -156.490366357573 71.33732137574926, -156.4892625474061 71.3376002105995, -156.4881663698033 71.33788202948755, -156.4870267934291 71.33818112262261, -156.4859492188401 71.33847143657134, -156.4848625073026 71.33876932173673, -156.483784689499 71.33907415017491, -156.4827114561301 71.33938391097996, -156.4816580515168 71.33970010180795, -156.4806175290822 71.34002026596853, -156.4785529076026 71.34067126323862, -156.4775074001318 71.34099309868598, -156.4764523297004 71.3413126205802, -156.4753829071092 71.3416291319849, -156.4742990792749 71.34194096860639, -156.473209068999 71.34225050860968, -156.4699273843945 71.34316840458551, -156.4677194967091 71.34378008019132, -156.4666457021682 71.34408126646501, -156.4655568074973 71.34439305053294, -156.4644546286366 71.34471405200787, -156.4623063595145 71.34535073339525, -156.4612346705911 71.34567025987494, -156.4591188389623 71.34630501340936, -156.4580637062034 71.34662619038286, -156.4569977042272 71.34695328226798, -156.4528611950474 71.34823204819024, -156.4507845482672 71.34887869336997, -156.4497307538724 71.34920853010452, -156.4476568215387 71.34986321248422, -156.4455978909015 71.35052080875229, -156.4414593131216 71.35184648151713, -156.4404018149463 71.35218036707008, -156.43936166517 71.35250487200962, -156.4383121627975 71.35282803048864, -156.4372566415278 71.35314817723791, -156.4351649710382 71.35377930617807, -156.4341286180022 71.35410241925118, -156.4331100164198 71.3544406228811, -156.4321429781732 71.35478748121061, -156.4312227689677 71.35514529869755, -156.4303657450533 71.35551066383643, -156.429536208332 71.35590364385305, -156.4287672722377 71.35630801703684, -156.4280681279714 71.356709515711, -156.4273962026615 71.35712472542727, -156.4267505245791 71.35754243598277, -156.4248684492712 71.35879328280319, -156.4242244856834 71.35921867035663, -156.4223171114144 71.36047470647941, -156.4210310955399 71.36131761322342, -156.419727423489 71.36216176635099, -156.4177551003463 71.36343444962594, -156.4170914671864 71.36386131661163, -156.4157594254482 71.36471430457546, -156.4151014161232 71.36514075704201, -156.41445403608 71.36556844566474, -156.4138270011613 71.36600031140608, -156.4132410801138 71.36643465288353, -156.4127210251959 71.36688103892821, -156.4123497738317 71.3672588206452)'
    }
    assert awi_full.as_dict() == expected_full
    assert awi_meta.as_dict() == expected_meta

def test_oib_as_dict(oib_full, oib_meta):
    '''expected data based on Data_20160419_04_010.mat'''
    expected_full = {
        'fname': OIB_TEST_FILE.name,
        'fpath': str(OIB_TEST_FILE.absolute()),
        'l_case': 'full',
        'tstart': 1461071183.9615262, # utc time
        'tend': 1461071225.002684, # utc time
        'poly': 'POLYGON ((-86.76076421204809 80.22643933420355, -86.76076421204809 80.2711290662714, -86.76363201954442 80.2711290662714, -86.76363201954442 80.22643933420355, -86.76076421204809 80.22643933420355))',
        'line': 'LINESTRING (-86.76363201954442 80.22643933420355, -86.76354729494433 80.22715111300485, -86.76346798539211 80.22786294252762, -86.76333700032208 80.22910872671955, -86.76323430122855 80.23013214077605, -86.76315959526343 80.23093313609648, -86.76306187507986 80.23204573804834, -86.76298225095147 80.23298047746418, -86.76289951269507 80.23400434250553, -86.76281880980898 80.23507288222198, -86.76274527120302 80.23609706066914, -86.76265783669956 80.2373885562328, -86.76260649751745 80.23819031255547, -86.76252273336272 80.23957129226717, -86.76247933445332 80.24032869472788, -86.76238102276048 80.2422002155338, -86.76234150364641 80.24300243645393, -86.76230517247755 80.24380474253329, -86.76226888628169 80.244651746884, -86.76224767695017 80.24518672711466, -86.76222518720849 80.24581091132499, -86.76216749803784 80.24763924712715, -86.76215215582296 80.24826364479512, -86.76213745852139 80.24897732521322, -86.76211890743056 80.25004796130352, -86.76210347417452 80.25116329346999, -86.76209466881976 80.25201108199379, -86.76208513294532 80.25330534826969, -86.76208328326324 80.2540641632675, -86.76208381522352 80.25486776313193, -86.76209693257076 80.25790425489396, -86.76209579023497 80.25844023119629, -86.76209118055428 80.25897623007771, -86.76208521440294 80.25937825820954, -86.76207772018945 80.25973563204198, -86.762067692445 80.26009302685267, -86.76205671093399 80.26040574695332, -86.76204154431747 80.26076313425408, -86.76202608474198 80.26107585025838, -86.76200617193719 80.26143324667358, -86.76198135925854 80.26183531749248, -86.76193898530011 80.26246079081213, -86.76189620904574 80.26304162792496, -86.76185614522971 80.26353312509818, -86.76181170432085 80.26402462529342, -86.7617584318107 80.26456078507881, -86.76169563912931 80.26514162477005, -86.76163295891961 80.26567782229439, -86.7615652493714 80.2662140449074, -86.76149227721537 80.26675026785443, -86.76142065462763 80.26724178331516, -86.76132448456387 80.26786733595283, -86.76121008741833 80.26858227384886, -86.7611063980589 80.26920784347836, -86.76099901032364 80.26983338440002, -86.76088758089062 80.27045890736798, -86.76076421204809 80.2711290662714)'
    } 
    expected_meta = {
        'fname': OIB_TEST_FILE.name,
        'fpath': str(OIB_TEST_FILE.absolute()),
        'l_case': 'meta',
        'tstart': 1461071183.9615262, # utc time
        'tend': 1461071225.002684, # utc time
        'poly': 'POLYGON ((-86.76076421204809 80.22643933420355, -86.76076421204809 80.2711290662714, -86.76363201954442 80.2711290662714, -86.76363201954442 80.22643933420355, -86.76076421204809 80.22643933420355))',
        'line': 'LINESTRING (-86.76363201954442 80.22643933420355, -86.76354729494433 80.22715111300485, -86.76346798539211 80.22786294252762, -86.76333700032208 80.22910872671955, -86.76323430122855 80.23013214077605, -86.76315959526343 80.23093313609648, -86.76306187507986 80.23204573804834, -86.76298225095147 80.23298047746418, -86.76289951269507 80.23400434250553, -86.76281880980898 80.23507288222198, -86.76274527120302 80.23609706066914, -86.76265783669956 80.2373885562328, -86.76260649751745 80.23819031255547, -86.76252273336272 80.23957129226717, -86.76247933445332 80.24032869472788, -86.76238102276048 80.2422002155338, -86.76234150364641 80.24300243645393, -86.76230517247755 80.24380474253329, -86.76226888628169 80.244651746884, -86.76224767695017 80.24518672711466, -86.76222518720849 80.24581091132499, -86.76216749803784 80.24763924712715, -86.76215215582296 80.24826364479512, -86.76213745852139 80.24897732521322, -86.76211890743056 80.25004796130352, -86.76210347417452 80.25116329346999, -86.76209466881976 80.25201108199379, -86.76208513294532 80.25330534826969, -86.76208328326324 80.2540641632675, -86.76208381522352 80.25486776313193, -86.76209693257076 80.25790425489396, -86.76209579023497 80.25844023119629, -86.76209118055428 80.25897623007771, -86.76208521440294 80.25937825820954, -86.76207772018945 80.25973563204198, -86.762067692445 80.26009302685267, -86.76205671093399 80.26040574695332, -86.76204154431747 80.26076313425408, -86.76202608474198 80.26107585025838, -86.76200617193719 80.26143324667358, -86.76198135925854 80.26183531749248, -86.76193898530011 80.26246079081213, -86.76189620904574 80.26304162792496, -86.76185614522971 80.26353312509818, -86.76181170432085 80.26402462529342, -86.7617584318107 80.26456078507881, -86.76169563912931 80.26514162477005, -86.76163295891961 80.26567782229439, -86.7615652493714 80.2662140449074, -86.76149227721537 80.26675026785443, -86.76142065462763 80.26724178331516, -86.76132448456387 80.26786733595283, -86.76121008741833 80.26858227384886, -86.7611063980589 80.26920784347836, -86.76099901032364 80.26983338440002, -86.76088758089062 80.27045890736798, -86.76076421204809 80.2711290662714)'
    }  
    assert oib_full.as_dict() == expected_full
    assert oib_meta.as_dict() == expected_meta

def test_nsidc_as_dict(nsidc_full, nsidc_meta):
    '''expected data based on IRSNO1B_20160419_04_006_deconv.nc'''
    expected_full = {
        'fname': NSIDC_TEST_FILE.name,
        'fpath': str(NSIDC_TEST_FILE.absolute()),
        'l_case': 'full',
        'tstart': 1461085417.0,
        'tend': 1461085459.0,
        'poly': 'POLYGON ((-86.77961001985848 80.04738300686103, -86.77961001985848 80.09208204024674, -86.78548986247817 80.09208204024674, -86.78548986247817 80.04738300686103, -86.77961001985848 80.04738300686103))',
        'line': 'LINESTRING (-86.78548986247817 80.04738300686103, -86.78545604397534 80.04781759483555, -86.78542269988343 80.04820875059008, -86.78538658969265 80.04859991713901, -86.78534751871857 80.04899109384692, -86.78530508641445 80.04938227375676, -86.78526436042087 80.04973000280525, -86.78522068796934 80.05007774680688, -86.78516816547453 80.05046897762719, -86.78511832903526 80.05081675526193, -86.78505880472919 80.05120802481125, -86.78499567373301 80.051599302661, -86.7849367902613 80.05194712016912, -86.78486755719477 80.052338430608, -86.78479545143281 80.05272974328314, -86.78471241570114 80.05316451910983, -86.78461778431401 80.0536427802098, -86.78452914746266 80.05407758399247, -86.78443780781075 80.05451239528645, -86.78433446392674 80.05499068307493, -86.78422830138476 80.05546899032848, -86.78411869788103 80.05594949447092, -86.78401707526118 80.05638435933437, -86.78390281978832 80.05686272452105, -86.78377531640754 80.05738456565025, -86.78365630572259 80.05786295460396, -86.78354605567628 80.05829787951295, -86.78327544742206 80.05934167530125, -86.78312446836583 80.05990705393563, -86.78267490699724 80.06155968744127, -86.78255917432307 80.06199466292399, -86.78245710152176 80.06238618703725, -86.78233532609617 80.06286477456013, -86.78222807964994 80.06329990824699, -86.78211385666664 80.06377858885769, -86.78201339727663 80.06421379919081, -86.78189803599355 80.06473613994751, -86.78177956735402 80.06530210304823, -86.78166791198662 80.06586812058961, -86.78157117774749 80.06639065041999, -86.78148107510808 80.06691324306355, -86.78138336307784 80.06752304534872, -86.78130577382277 80.06804580890633, -86.78122811589189 80.06861220605653, -86.7811622796152 80.06913508935118, -86.78109799649212 80.06970159949262, -86.78103527255109 80.0703117463203, -86.78097452737897 80.07096553510965, -86.7809119996989 80.07170653978213, -86.78084426382841 80.07257838415572, -86.78078247737078 80.07345029892632, -86.78073559690939 80.07419145682235, -86.78070624017869 80.07471465085577, -86.78067361416987 80.07536869147484, -86.78063997063727 80.07610995735801, -86.78061340795674 80.07676405061071, -86.78058414552642 80.07754901963726, -86.78056008816091 80.07824682397685, -86.78048330276738 80.08073323590953, -86.78046588050992 80.08121315191109, -86.78044746964019 80.08164945325156, -86.7804048650133 80.082522040789, -86.78034836729516 80.08356921202703, -86.78029016674159 80.08452922125659, -86.78022934966876 80.08544568339342, -86.7801307900517 80.08684229825259, -86.78007204704602 80.08762799975639, -86.78000407925349 80.08845745093554, -86.77994177419748 80.08915605729139, -86.77986901109084 80.08989841611326, -86.77979789066113 80.09055345128259, -86.77970492395947 80.09133957358833, -86.77961001985848 80.09208204024674)'
    }
    expected_meta = {
        'fname': NSIDC_TEST_FILE.name,
        'fpath': str(NSIDC_TEST_FILE.absolute()),
        'l_case': 'meta',
        'tstart': 1461085417.0,
        'tend': 1461085459.0,
        'poly': 'POLYGON ((-86.77961001985848 80.04738300686103, -86.77961001985848 80.09208204024674, -86.78548986247817 80.09208204024674, -86.78548986247817 80.04738300686103, -86.77961001985848 80.04738300686103))',
        'line': 'LINESTRING (-86.78548986247817 80.04738300686103, -86.78545604397534 80.04781759483555, -86.78542269988343 80.04820875059008, -86.78538658969265 80.04859991713901, -86.78534751871857 80.04899109384692, -86.78530508641445 80.04938227375676, -86.78526436042087 80.04973000280525, -86.78522068796934 80.05007774680688, -86.78516816547453 80.05046897762719, -86.78511832903526 80.05081675526193, -86.78505880472919 80.05120802481125, -86.78499567373301 80.051599302661, -86.7849367902613 80.05194712016912, -86.78486755719477 80.052338430608, -86.78479545143281 80.05272974328314, -86.78471241570114 80.05316451910983, -86.78461778431401 80.0536427802098, -86.78452914746266 80.05407758399247, -86.78443780781075 80.05451239528645, -86.78433446392674 80.05499068307493, -86.78422830138476 80.05546899032848, -86.78411869788103 80.05594949447092, -86.78401707526118 80.05638435933437, -86.78390281978832 80.05686272452105, -86.78377531640754 80.05738456565025, -86.78365630572259 80.05786295460396, -86.78354605567628 80.05829787951295, -86.78327544742206 80.05934167530125, -86.78312446836583 80.05990705393563, -86.78267490699724 80.06155968744127, -86.78255917432307 80.06199466292399, -86.78245710152176 80.06238618703725, -86.78233532609617 80.06286477456013, -86.78222807964994 80.06329990824699, -86.78211385666664 80.06377858885769, -86.78201339727663 80.06421379919081, -86.78189803599355 80.06473613994751, -86.78177956735402 80.06530210304823, -86.78166791198662 80.06586812058961, -86.78157117774749 80.06639065041999, -86.78148107510808 80.06691324306355, -86.78138336307784 80.06752304534872, -86.78130577382277 80.06804580890633, -86.78122811589189 80.06861220605653, -86.7811622796152 80.06913508935118, -86.78109799649212 80.06970159949262, -86.78103527255109 80.0703117463203, -86.78097452737897 80.07096553510965, -86.7809119996989 80.07170653978213, -86.78084426382841 80.07257838415572, -86.78078247737078 80.07345029892632, -86.78073559690939 80.07419145682235, -86.78070624017869 80.07471465085577, -86.78067361416987 80.07536869147484, -86.78063997063727 80.07610995735801, -86.78061340795674 80.07676405061071, -86.78058414552642 80.07754901963726, -86.78056008816091 80.07824682397685, -86.78048330276738 80.08073323590953, -86.78046588050992 80.08121315191109, -86.78044746964019 80.08164945325156, -86.7804048650133 80.082522040789, -86.78034836729516 80.08356921202703, -86.78029016674159 80.08452922125659, -86.78022934966876 80.08544568339342, -86.7801307900517 80.08684229825259, -86.78007204704602 80.08762799975639, -86.78000407925349 80.08845745093554, -86.77994177419748 80.08915605729139, -86.77986901109084 80.08989841611326, -86.77979789066113 80.09055345128259, -86.77970492395947 80.09133957358833, -86.77961001985848 80.09208204024674)'
    }
    assert nsidc_full.as_dict() == expected_full
    assert nsidc_meta.as_dict() == expected_meta

def test_calcpulsewidth_result(awi_full, awi_meta, oib_full, oib_meta, nsidc_full, nsidc_meta):
    awi_full.calcpulsewidth()
    awi_meta.calcpulsewidth()
    # expected AWI values based on Data_20170410_01_006.mat
    expected_awi_null_to_null_pulse_width = 0.075697595645
    expected_awi_equivalent_pulse_width = 0.028389437310606058
    assert awi_full.n2n == expected_awi_null_to_null_pulse_width
    assert awi_full.epw == expected_awi_equivalent_pulse_width
    assert awi_meta.n2n == expected_awi_null_to_null_pulse_width
    assert awi_meta.epw == expected_awi_equivalent_pulse_width
    oib_full.calcpulsewidth()
    oib_meta.calcpulsewidth()
    # expected OIB values based on Data_20160419_04_010.mat
    expected_oib_null_to_null_pulse_width = 0.20186025505333335
    expected_oib_equivalent_pulse_width = 0.07570516616161617
    assert oib_full.n2n == expected_oib_null_to_null_pulse_width
    assert oib_full.epw == expected_oib_equivalent_pulse_width
    assert oib_meta.n2n == expected_oib_null_to_null_pulse_width
    assert oib_meta.epw == expected_oib_equivalent_pulse_width
    # expected NSIDC values based on IRSNO1B_20160419_04_006_deconv.nc
    nsidc_full.calcpulsewidth()
    nsidc_meta.calcpulsewidth()
    expected_nsidc_null_to_null_pulse_width = 0.20186025505333335
    expected_nsidc_equivalent_pulse_width = 0.07570516616161617
    assert nsidc_full.n2n == expected_nsidc_null_to_null_pulse_width
    assert nsidc_full.epw == expected_nsidc_equivalent_pulse_width
    assert nsidc_full.n2n == expected_nsidc_null_to_null_pulse_width
    assert nsidc_meta.epw == expected_nsidc_equivalent_pulse_width
